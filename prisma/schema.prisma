// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  name          String?
  role          Role            @default(USER)
  status        Status          @default(PENDING)
  password      String
  fcmToken      String?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Notifications Notifications[] @relation(name: "Notifications")
  sender        Notifications[] @relation(name: "SenderNotifications")
  Cart          Cart[]
  Order         Order[]
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int?
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

model Food {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  discount    Float    @default(0)
  price       Float
  day         String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Cart        Cart[]
  Items       Items[]
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  location  String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  foodId      String   @db.ObjectId
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  foodDetails Food     @relation(fields: [foodId], references: [id])
  User        User     @relation(fields: [userId], references: [id])
}

model Order {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  totalPrice  Float?
  location    String
  status      FoodStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Items       Items[]
  marked      Boolean    @default(false)
  foodId      String?    @db.ObjectId
  userDetails User       @relation(fields: [userId], references: [id])
}

model Items {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  foodId       String   @db.ObjectId
  orderId      String?  @db.ObjectId
  quantity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  foodDetails  Food     @relation(fields: [foodId], references: [id])
  orderDetails Order?   @relation(fields: [orderId], references: [id])
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String?  @db.ObjectId
  receiverId String   @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [receiverId], references: [id], name: "Notifications")
  sender     User?    @relation(fields: [senderId], references: [id], name: "SenderNotifications")

  @@map("notifications")
}

enum Role {
  USER
  ADMIN
}

enum FoodStatus {
  PENDING
  PROCESSING
  DELIVERED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}
